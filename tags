             terminal	ranger/rifle.conf	/^ext x?html?, has w3m,             terminal = w3m "$@"$/;"	k
            terminal	ranger/rifle.conf	/^ext x?html?, has lynx,            terminal = lynx -- "$@"$/;"	k
           terminal	ranger/rifle.conf	/^ext x?html?, has links,           terminal = links "$@"$/;"	k
          terminal	ranger/rifle.conf	/^ext x?html?, has elinks,          terminal = elinks "$@"$/;"	k
          terminal	ranger/rifle.conf	/^ext x?html?, has links2,          terminal = links2 "$@"$/;"	k
        pager_move  up	ranger/rc.conf	/^pmap  <up>        pager_move  up=1$/;"	k
        taskview_move up	ranger/rc.conf	/^tmap <up>        taskview_move up=1$/;"	k
       move right	ranger/rc.conf	/^map <CR>       move right=1$/;"	k
       move up	ranger/rc.conf	/^map <UP>       move up=1$/;"	k
       pager_move  down	ranger/rc.conf	/^pmap  <C-d>       pager_move  down=0.5  pages=True$/;"	k
       pager_move  to	ranger/rc.conf	/^pmap  <end>       pager_move  to=-1$/;"	k
       pager_move  up	ranger/rc.conf	/^pmap  <C-u>       pager_move  up=0.5    pages=True$/;"	k
       taskview_move down	ranger/rc.conf	/^tmap <C-d>       taskview_move down=0.5  pages=True$/;"	k
       taskview_move to	ranger/rc.conf	/^tmap <end>       taskview_move to=-1$/;"	k
       taskview_move up	ranger/rc.conf	/^tmap <C-u>       taskview_move up=0.5    pages=True$/;"	k
       terminal	ranger/rifle.conf	/^ext docx?, has catdoc,       terminal = catdoc -- "$@" | "$PAGER"$/;"	k
      move to	ranger/rc.conf	/^map <END>      move to=-1$/;"	k
      pager_move  down	ranger/rc.conf	/^pmap  <down>      pager_move  down=1$/;"	k
      pager_move  left	ranger/rc.conf	/^pmap  <left>      pager_move  left=4$/;"	k
      pager_move  to	ranger/rc.conf	/^pmap  <home>      pager_move  to=0$/;"	k
      taskview_move down	ranger/rc.conf	/^tmap <down>      taskview_move down=1$/;"	k
      taskview_move to	ranger/rc.conf	/^tmap <home>      taskview_move to=0$/;"	k
     move down	ranger/rc.conf	/^map <DOWN>     move down=1$/;"	k
     move left	ranger/rc.conf	/^map <LEFT>     move left=1$/;"	k
     move to	ranger/rc.conf	/^map <HOME>     move to=0$/;"	k
     pager_move  right	ranger/rc.conf	/^pmap  <right>     pager_move  right=4$/;"	k
    move right	ranger/rc.conf	/^map <RIGHT>    move right=1$/;"	k
    pager_move  up	ranger/rc.conf	/^pmap  <pageup>    pager_move  up=1.0    pages=True$/;"	k
    taskview_move up	ranger/rc.conf	/^tmap <pageup>    taskview_move up=1.0    pages=True$/;"	k
   move up	ranger/rc.conf	/^map <PAGEUP>   move up=1     pages=True$/;"	k
  label editor	ranger/rifle.conf	/^mime ^text,  label editor = $EDITOR -- "$@"$/;"	k
  label pager	ranger/rifle.conf	/^mime ^text,  label pager  = "$PAGER" -- "$@"$/;"	k
  pager_move  down	ranger/rc.conf	/^pmap  <pagedown>  pager_move  down=1.0  pages=True$/;"	k
  taskview_move down	ranger/rc.conf	/^tmap <pagedown>  taskview_move down=1.0  pages=True$/;"	k
 X	ranger/rifle.conf	/^ext nes, has fceux, X         = fceux "$1"$/;"	k
 X	ranger/rifle.conf	/^ext s[wmf]c, has zsnes, X     = zsnes "$1"$/;"	k
 X	ranger/rifle.conf	/^label wallpaper, number 11, mime ^image, has feh, X = feh --bg-scale "$1"$/;"	k
 X	ranger/rifle.conf	/^label wallpaper, number 12, mime ^image, has feh, X = feh --bg-tile "$1"$/;"	k
 X	ranger/rifle.conf	/^label wallpaper, number 13, mime ^image, has feh, X = feh --bg-center "$1"$/;"	k
 X	ranger/rifle.conf	/^label wallpaper, number 14, mime ^image, has feh, X = feh --bg-fill "$1"$/;"	k
 flag f	ranger/rifle.conf	/^ext                        sxc|xlsx?|xlt|xlw|gnm|gnumeric, has gnumeric,    X, flag f = gnumeric/;"	k
 flag f	ranger/rifle.conf	/^ext                        sxc|xlsx?|xlt|xlw|gnm|gnumeric, has kspread,     X, flag f = kspread /;"	k
 flag f	ranger/rifle.conf	/^ext djvu, has atril,  X, flag f = atril -- "$@"$/;"	k
 flag f	ranger/rifle.conf	/^ext djvu, has evince, X, flag f = evince -- "$@"$/;"	k
 flag f	ranger/rifle.conf	/^ext djvu, has zathura,X, flag f = zathura -- "$@"$/;"	k
 flag f	ranger/rifle.conf	/^ext pdf, has apvlv,    X, flag f = apvlv -- "$@"$/;"	k
 flag f	ranger/rifle.conf	/^ext pdf, has atril,    X, flag f = atril -- "$@"$/;"	k
 flag f	ranger/rifle.conf	/^ext pdf, has epdfview, X, flag f = epdfview -- "$@"$/;"	k
 flag f	ranger/rifle.conf	/^ext pdf, has evince,   X, flag f = evince -- "$@"$/;"	k
 flag f	ranger/rifle.conf	/^ext pdf, has llpp,     X, flag f = llpp "$@"$/;"	k
 flag f	ranger/rifle.conf	/^ext pdf, has mupdf,    X, flag f = mupdf "$@"$/;"	k
 flag f	ranger/rifle.conf	/^ext pdf, has mupdf-x11,X, flag f = mupdf-x11 "$@"$/;"	k
 flag f	ranger/rifle.conf	/^ext pdf, has okular,   X, flag f = okular -- "$@"$/;"	k
 flag f	ranger/rifle.conf	/^ext pdf, has qpdfview, X, flag f = qpdfview "$@"$/;"	k
 flag f	ranger/rifle.conf	/^ext pdf, has xpdf,     X, flag f = xpdf -- "$@"$/;"	k
 flag f	ranger/rifle.conf	/^ext pdf, has zathura,  X, flag f = zathura -- "$@"$/;"	k
 flag f	ranger/rifle.conf	/^ext pptx?|od[dfgpst]|docx?|sxc|xlsx?|xlt|xlw|gnm|gnumeric, has libreoffice, X, flag f = libreoff/;"	k
 flag f	ranger/rifle.conf	/^ext pptx?|od[dfgpst]|docx?|sxc|xlsx?|xlt|xlw|gnm|gnumeric, has ooffice,     X, flag f = ooffice /;"	k
 flag f	ranger/rifle.conf	/^ext pptx?|od[dfgpst]|docx?|sxc|xlsx?|xlt|xlw|gnm|gnumeric, has soffice,     X, flag f = soffice /;"	k
 flag f	ranger/rifle.conf	/^ext x?html?, has chromium,       X, flag f = chromium -- "$@"$/;"	k
 flag f	ranger/rifle.conf	/^ext x?html?, has dwb,            X, flag f = dwb -- "$@"$/;"	k
 flag f	ranger/rifle.conf	/^ext x?html?, has epiphany,       X, flag f = epiphany -- "$@"$/;"	k
 flag f	ranger/rifle.conf	/^ext x?html?, has firefox,        X, flag f = firefox -- "$@"$/;"	k
 flag f	ranger/rifle.conf	/^ext x?html?, has iceweasel,      X, flag f = iceweasel -- "$@"$/;"	k
 flag f	ranger/rifle.conf	/^ext x?html?, has jumanji,        X, flag f = jumanji -- "$@"$/;"	k
 flag f	ranger/rifle.conf	/^ext x?html?, has konqueror,      X, flag f = konqueror -- "$@"$/;"	k
 flag f	ranger/rifle.conf	/^ext x?html?, has luakit,         X, flag f = luakit -- "$@"$/;"	k
 flag f	ranger/rifle.conf	/^ext x?html?, has midori,         X, flag f = midori -- "$@"$/;"	k
 flag f	ranger/rifle.conf	/^ext x?html?, has opera,          X, flag f = opera -- "$@"$/;"	k
 flag f	ranger/rifle.conf	/^ext x?html?, has qutebrowser,    X, flag f = qutebrowser -- "$@"$/;"	k
 flag f	ranger/rifle.conf	/^ext x?html?, has seamonkey,      X, flag f = seamonkey -- "$@"$/;"	k
 flag f	ranger/rifle.conf	/^ext x?html?, has surf,           X, flag f = surf -- file:\/\/"$1"$/;"	k
 flag f	ranger/rifle.conf	/^ext x?html?, has uzbl,           X, flag f = uzbl -- "$@"$/;"	k
 flag f	ranger/rifle.conf	/^ext x?html?, has uzbl-browser,   X, flag f = uzbl-browser -- "$@"$/;"	k
 flag f	ranger/rifle.conf	/^ext x?html?, has uzbl-core,      X, flag f = uzbl-core -- "$@"$/;"	k
 flag f	ranger/rifle.conf	/^ext x?html?, has uzbl-tabbed,    X, flag f = uzbl-tabbed -- "$@"$/;"	k
 flag f	ranger/rifle.conf	/^ext x?html?, has vimprobable,    X, flag f = vimprobable -- "$@"$/;"	k
 flag f	ranger/rifle.conf	/^ext x?html?, has vimprobable2,   X, flag f = vimprobable2 -- "$@"$/;"	k
 flag f	ranger/rifle.conf	/^ext xcf,                    X, flag f = gimp -- "$@"$/;"	k
 flag f	ranger/rifle.conf	/^mime ^image, has eog,       X, flag f = eog -- "$@"$/;"	k
 flag f	ranger/rifle.conf	/^mime ^image, has eom,       X, flag f = eom -- "$@"$/;"	k
 flag f	ranger/rifle.conf	/^mime ^image, has feh,       X, flag f = feh -- "$@"$/;"	k
 flag f	ranger/rifle.conf	/^mime ^image, has gimp,      X, flag f = gimp -- "$@"$/;"	k
 flag f	ranger/rifle.conf	/^mime ^image, has mirage,    X, flag f = mirage -- "$@"$/;"	k
 flag f	ranger/rifle.conf	/^mime ^image, has pqiv,      X, flag f = pqiv -- "$@"$/;"	k
 flag f	ranger/rifle.conf	/^mime ^image, has ristretto, X, flag f = ristretto "$@"$/;"	k
 flag f	ranger/rifle.conf	/^mime ^image, has sxiv,      X, flag f = sxiv -- "$@"$/;"	k
 flag f	ranger/rifle.conf	/^mime ^image\/svg, has display,  X, flag f = display -- "$@"$/;"	k
 flag f	ranger/rifle.conf	/^mime ^image\/svg, has inkscape, X, flag f = inkscape -- "$@"$/;"	k
 flag f	ranger/rifle.conf	/^mime ^video,       has mplayer,  X, flag f = mplayer -- "$@"$/;"	k
 flag f	ranger/rifle.conf	/^mime ^video,       has mplayer,  X, flag f = mplayer -fs -- "$@"$/;"	k
 flag f	ranger/rifle.conf	/^mime ^video,       has mplayer2, X, flag f = mplayer2 -- "$@"$/;"	k
 flag f	ranger/rifle.conf	/^mime ^video,       has mplayer2, X, flag f = mplayer2 -fs -- "$@"$/;"	k
 flag f	ranger/rifle.conf	/^mime ^video,       has mpv,      X, flag f = mpv -- "$@"$/;"	k
 flag f	ranger/rifle.conf	/^mime ^video,       has mpv,      X, flag f = mpv --fs -- "$@"$/;"	k
 flag f	ranger/rifle.conf	/^mime ^video|audio, has gmplayer, X, flag f = gmplayer -- "$@"$/;"	k
 flag f	ranger/rifle.conf	/^mime ^video|audio, has smplayer, X, flag f = smplayer "$@"$/;"	k
 flag f	ranger/rifle.conf	/^mime ^video|audio, has totem,    X, flag f = totem -- "$@"$/;"	k
 flag f	ranger/rifle.conf	/^mime ^video|audio, has totem,    X, flag f = totem --fullscreen -- "$@"$/;"	k
 flag f	ranger/rifle.conf	/^mime ^video|audio, has vlc,      X, flag f = vlc -- "$@"$/;"	k
 has 7z	ranger/rifle.conf	/^ext 7z, has 7z = 7z -p l "$@" | "$PAGER"$/;"	k
 has als	ranger/rifle.conf	/^ext ace|ar|arc|bz2?|cab|cpio|cpt|deb|dgc|dmg|gz,  has als     = als -- "$@" | "$PAGER"$/;"	k
 has als	ranger/rifle.conf	/^ext iso|jar|msi|pkg|rar|shar|tar|tgz|xar|xpi|xz|zip, has als     = als -- "$@" | "$PAGER"$/;"	k
 has aunpack	ranger/rifle.conf	/^ext 7z|ace|ar|arc|bz2?|cab|cpio|cpt|deb|dgc|dmg|gz,  has aunpack = aunpack -- "$@"$/;"	k
 has aunpack	ranger/rifle.conf	/^ext iso|jar|msi|pkg|rar|shar|tar|tgz|xar|xpi|xz|zip, has aunpack = aunpack -- "$@"$/;"	k
 has mplayer	ranger/rifle.conf	/^mime ^audio|ogg$, terminal, has mplayer  = mplayer -- "$@"$/;"	k
 has mplayer	ranger/rifle.conf	/^mime ^video, terminal, !X, has mplayer   = mplayer -- "$@"$/;"	k
 has mplayer2	ranger/rifle.conf	/^mime ^audio|ogg$, terminal, has mplayer2 = mplayer2 -- "$@"$/;"	k
 has mplayer2	ranger/rifle.conf	/^mime ^video, terminal, !X, has mplayer2  = mplayer2 -- "$@"$/;"	k
 has mpv	ranger/rifle.conf	/^mime ^audio|ogg$, terminal, has mpv      = mpv -- "$@"$/;"	k
 has mpv	ranger/rifle.conf	/^mime ^video, terminal, !X, has mpv       = mpv -- "$@"$/;"	k
 has tar	ranger/rifle.conf	/^ext tar|gz, has tar = tar vvtf "$@" | "$PAGER"$/;"	k
 has tar	ranger/rifle.conf	/^ext tar|gz, has tar = tar vvxf "$@"$/;"	k
 has wildmidi	ranger/rifle.conf	/^ext midi?,        terminal, has wildmidi = wildmidi -- "$@"$/;"	k
 mark_files toggle	ranger/rc.conf	/^map <Space> mark_files toggle=True$/;"	k
 move down	ranger/rc.conf	/^map <PAGEDOWN> move down=1   pages=True$/;"	k
 tag_toggle tag	ranger/rc.conf	/^map "<any>  tag_toggle tag=%any$/;"	k
!	nvim/init.vim	/^map ! :!$/;"	m
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/1c8b98d/
+	nvim/init.vim	/^map + :Tagbar<CR>$/;"	m
,/	nvim/init.vim	/^nmap <silent> ,\/ :nohlsearch<CR>$/;"	m
,b	nvim/init.vim	/^map ,b :Dispatch npm run build<CR>$/;"	m
,b	nvim/init.vim	/^nmap ,b :sp term:\/\/bash %:p<CR>$/;"	m
,c	nvim/init.vim	/^map ,c :call VimuxInterruptRunner()<CR>$/;"	m
,d	nvim/init.vim	/^map ,d :Dispatch<SPACE>$/;"	m
,f	nvim/init.vim	/^map ,f :Dispatch npm test -- --tests %$/;"	m
,i	nvim/init.vim	/^map ,i :call VimuxInspectRunner()<CR>$/;"	m
,q	nvim/init.vim	/^map ,q :sp term:\/\/env NODE_ENV=qa npm start<CR>$/;"	m
,r	nvim/init.vim	/^nmap ,r :sp term:\/\/npm start<CR>$/;"	m
,r	nvim/init.vim	/^vmap ,r y:call VimuxRunFromClipboard()<CR>$/;"	m
,t	nvim/init.vim	/^nmap <silent> ,t :TestFile<CR>$/;"	m
,v	nvim/init.vim	/^map ,v :call VimuxPromptCommand("npm start")<CR>$/;"	m
,z	nvim/init.vim	/^map ,z :VimuxZoomRunner<CR>$/;"	m
-	nvim/init.vim	/^noremap - :Dirvish %:p:h<CR>$/;"	m
-	nvim/init.vim	/^noremap - :Dirvish %<CR>$/;"	m
.	nvim/init.vim	/^vnoremap . :normal .<CR>$/;"	m
/	nvim/init.vim	/^map \/  <Plug>(incsearch-forward)$/;"	m
/	nvim/init.vim	/^nnoremap \/ \/\\c$/;"	m
/	nvim/init.vim	/^vnoremap \/ \/\\c$/;"	m
;	nvim/init.vim	/^noremap ; :$/;"	m
<C-\\>	nvim/init.vim	/^nmap <C-\\> <C-\\><C-n> :wincmd p<CR>$/;"	m
<F10>	nvim/init.vim	/^map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'$/;"	m
<F3>	nvim/init.vim	/^map <F3> :CtrlSF -R ""<LEFT>$/;"	m
<F8>	nvim/init.vim	/^map <F8> :norm <c-a><CR>:w<BAR>:colo null<CR>$/;"	m
<F9>	nvim/init.vim	/^noremap <F9> :RandomColorScheme<CR>:colo<CR>$/;"	m
<S-F10>	nvim/init.vim	/^map <S-F10> :echo synIDattr(synIDtrans(synID(line("."), col("."), 1)), "fg")<CR>$/;"	m
<S-F8>	nvim/init.vim	/^map <S-F8> :norm <c-x><CR>:w<BAR>:colo null<CR>$/;"	m
<bar>	nvim/init.vim	/^vmap <bar> :g\/$/;"	m
<c-n>	nvim/init.vim	/^cmap <c-n> <down>$/;"	m
<c-p>	nvim/init.vim	/^cmap <c-p> <up>$/;"	m
<c-p>	nvim/init.vim	/^noremap <c-p> :find **\/*$/;"	m
<c-p>	nvim/init.vim	/^vnoremap <c-p> :<c-p>$/;"	m
<c-z>	nvim/init.vim	/^imap <c-z> <c-y>,$/;"	m
<cr>	nvim/autoload/plug.vim	/^    nnoremap <silent> <buffer> <cr> :silent! call <SID>preview_commit()<cr>$/;"	m
<enter>	nvim/init.vim	/^vmap <enter> :norm<space>$/;"	m
<leader>!	nvim/init.vim	/^nmap <leader>! :argdo<space>$/;"	m
<leader>/	nvim/init.vim	/^nmap <leader>\/ :GrepperAg ""<LEFT>$/;"	m
<leader>0	nvim/init.vim	/^nmap <leader>0 :set foldlevel=0<CR>$/;"	m
<leader>1	nvim/init.vim	/^nmap <leader>1 :set foldlevel=1<CR>$/;"	m
<leader>2	nvim/init.vim	/^nmap <leader>2 :set foldlevel=2<CR>$/;"	m
<leader>3	nvim/init.vim	/^nmap <leader>3 :set foldlevel=3<CR>$/;"	m
<leader>4	nvim/init.vim	/^nmap <leader>4 :set foldlevel=4<CR>$/;"	m
<leader>5	nvim/init.vim	/^nmap <leader>5 :set foldlevel=5<CR>$/;"	m
<leader>6	nvim/init.vim	/^nmap <leader>6 :set foldlevel=6<CR>$/;"	m
<leader>7	nvim/init.vim	/^nmap <leader>7 :set foldlevel=7<CR>$/;"	m
<leader>8	nvim/init.vim	/^nmap <leader>8 "hyiw:GrepperAg -Q <c-r>h<CR>:nohlsearch<CR>$/;"	m
<leader>8	nvim/init.vim	/^vmap <leader>8 "hy:GrepperAg -Q '<c-r>h'<CR>$/;"	m
<leader>9	nvim/init.vim	/^nmap <leader>9 :set foldlevel=999<CR>$/;"	m
<leader><leader>/	nvim/init.vim	/^nmap <leader><leader>\/ :GrepperAg "" %:p:h<LEFT><LEFT><LEFT><LEFT><LEFT><LEFT><LEFT>$/;"	m
<leader><leader><leader>/	nvim/init.vim	/^nmap <leader><leader><leader>\/ :GrepperAg "" %:p:h:h<LEFT><LEFT><LEFT><LEFT><LEFT><LEFT><LEFT></;"	m
<leader><leader>S	nvim/init.vim	/^nmap <leader><leader>S :%S\/\/$/;"	m
<leader><leader>S	nvim/init.vim	/^vmap <leader><leader>S y:%S\/+\/+$/;"	m
<leader><leader>a	nvim/init.vim	/^nmap <leader><leader>a :%argdelete<CR>$/;"	m
<leader><leader>b	nvim/init.vim	/^nmap <leader><leader>b :BufExplorer<CR>gg4j$/;"	m
<leader><leader>b	nvim/init.vim	/^nmap <leader><leader>b :ls h<CR>:b$/;"	m
<leader><leader>c	nvim/init.vim	/^nmap <silent> <leader><leader>c :%bdelete!<CR>$/;"	m
<leader><leader>f	nvim/init.vim	/^nmap <leader><leader>f :filter \/\/ ls<LEFT><LEFT><LEFT><LEFT>$/;"	m
<leader><leader>f	nvim/init.vim	/^nmap <leader><leader>f :find <C-R>=expand('%:h').'\/'<CR>$/;"	m
<leader><leader>g	nvim/init.vim	/^map <leader><leader>g :call ToggleGrepperBuffersMode()<CR>$/;"	m
<leader><leader>i	nvim/init.vim	/^nmap <leader><leader>i :PlugInstall<CR>$/;"	m
<leader><leader>p	nvim/init.vim	/^nmap <leader><leader>p :MRU<CR>$/;"	m
<leader><leader>q	nvim/init.vim	/^nmap <leader><leader>q :qa<CR>$/;"	m
<leader><leader>r	nvim/init.vim	/^nmap <leader><leader>r :Codi!!<CR>$/;"	m
<leader><leader>r	nvim/init.vim	/^nmap <leader><leader>r :Renamer<CR>$/;"	m
<leader><leader>s	nvim/init.vim	/^nmap <leader><leader>s :%s\/\/$/;"	m
<leader><leader>s	nvim/init.vim	/^vmap <leader><leader>s y:%s\/+\/+$/;"	m
<leader><leader>t	nvim/init.vim	/^nmap <leader><leader>t :sp ~\/dotfiles\/.ctags<CR>$/;"	m
<leader><leader>u	nvim/init.vim	/^nmap <leader><leader>u :PlugClean!<CR>$/;"	m
<leader><leader>w	nvim/init.vim	/^nmap <leader><leader>w :Obsess!<CR>$/;"	m
<leader><tab>	nvim/init.vim	/^map <leader><tab> <c-^>$/;"	m
<leader>=	nvim/init.vim	/^nmap <leader>= =$/;"	m
<leader>O	nvim/init.vim	/^nmap <leader>O :call LetMeDuckThatForYou(&filetype . ' ' . '<c-r><c-w>')<CR>$/;"	m
<leader>S	nvim/init.vim	/^nmap <leader>S V:S\/$/;"	m
<leader>S	nvim/init.vim	/^vmap <leader>S :S\/$/;"	m
<leader>]	nvim/init.vim	/^nmap <leader>] :tjump \/$/;"	m
<leader>a	nvim/init.vim	/^nmap <leader>a :args **\/**<LEFT>$/;"	m
<leader>b	nvim/init.vim	/^noremap <leader>b :b<space>$/;"	m
<leader>c	nvim/init.vim	/^nmap <leader>c :bdelete!<CR>$/;"	m
<leader>d	nvim/init.vim	/^nmap <silent> <leader>d <Plug>DashSearch$/;"	m
<leader>eu	nvim/init.vim	/^nmap <leader>eu :UltiSnipsEdit<CR>$/;"	m
<leader>ev	nvim/init.vim	/^nmap <leader>ev :vsp ~\/.config\/nvim\/init.vim<CR>$/;"	m
<leader>f	nvim/init.vim	/^nmap <leader>f :find **\/*$/;"	m
<leader>gL	nvim/init.vim	/^map <leader>gL :Glog<BAR>:bot copen<CR>$/;"	m
<leader>gP	nvim/init.vim	/^map <leader>gP :Gpush<CR>$/;"	m
<leader>gR	nvim/init.vim	/^map <leader>gR :Gread<CR>$/;"	m
<leader>gb	nvim/init.vim	/^map <leader>gb :Gblame<CR>$/;"	m
<leader>gc	nvim/init.vim	/^map <leader>gc :Gcommit<CR>i$/;"	m
<leader>gd	nvim/init.vim	/^map <leader>gd :Gdiff<CR>$/;"	m
<leader>ge	nvim/init.vim	/^map <leader>ge :Gedit<CR>$/;"	m
<leader>gg	nvim/init.vim	/^map <leader>gg :Magit<CR>$/;"	m
<leader>gh	nvim/init.vim	/^map <leader>gh :Gbrowse<CR>$/;"	m
<leader>gl	nvim/init.vim	/^map <leader>gl :Extradite<CR>$/;"	m
<leader>gp	nvim/init.vim	/^map <leader>gp :Gpull<CR>$/;"	m
<leader>gs	nvim/init.vim	/^map <leader>gs :Gstatus<CR>$/;"	m
<leader>gw	nvim/init.vim	/^map <leader>gw :Gwrite<CR>$/;"	m
<leader>h	nvim/init.vim	/^nmap <leader>h :sp<CR>$/;"	m
<leader>l	nvim/init.vim	/^nmap <leader>l yiw{oconsole.warn(`"`, ")^$/;"	m
<leader>l	nvim/init.vim	/^vmap <leader>l y{oconsole.warn(`"`, ")^$/;"	m
<leader>o	nvim/init.vim	/^nmap <leader>o :call LetMeDuckThatForYou('')<CR>$/;"	m
<leader>o	nvim/init.vim	/^vmap <leader>o y:call LetMeDuckThatForYou(&filetype . ' ' . @+)<CR>$/;"	m
<leader>p	nvim/init.vim	/^noremap <leader>p :find **\/*$/;"	m
<leader>q	nvim/init.vim	/^nmap <leader>q :q<CR>$/;"	m
<leader>s	nvim/init.vim	/^nmap <leader>s V:s\/$/;"	m
<leader>s	nvim/init.vim	/^vmap <leader>s :s\/$/;"	m
<leader>t	nvim/init.vim	/^nmap <silent> <leader>t :sp term:\/\/fish<CR>i$/;"	m
<leader>u	nvim/init.vim	/^nmap <leader>u :GundoToggle<CR>$/;"	m
<leader>v	nvim/init.vim	/^nmap <leader>v :vsp<CR>$/;"	m
<leader>w	nvim/init.vim	/^nmap <leader>w :w<CR>$/;"	m
<leader>yf	nvim/init.vim	/^nnoremap <leader>yf :let @*=expand('%:p')<CR>$/;"	m
<leader>z	nvim/init.vim	/^nmap <leader>z <bar>_$/;"	m
=	nvim/init.vim	/^nmap <silent> = :Neoformat prettier<CR>:w<CR>$/;"	m
?	nvim/init.vim	/^map ?  <Plug>(incsearch-backward)$/;"	m
?	nvim/init.vim	/^nnoremap ? ?\\c$/;"	m
?	nvim/init.vim	/^vnoremap ? ?\\c$/;"	m
A	nvim/init.vim	/^vmap A :norm A$/;"	m
AS_YOU_TYPE	ranger/commands_full.py	/^    AS_YOU_TYPE     = 't'$/;"	v	class:scout
AUTO_OPEN	ranger/commands_full.py	/^    AUTO_OPEN       = 'a'$/;"	v	class:scout
CharacterRequiresUrlEncoding	nvim/init.vim	/^function! CharacterRequiresUrlEncoding(character)$/;"	f
CurrentAttributeA	nvim/init.vim	/^function! CurrentAttributeA()$/;"	f
CurrentDelimitedA	nvim/init.vim	/^function! CurrentDelimitedA()$/;"	f
D	nvim/autoload/plug.vim	/^  nnoremap <silent> <buffer> D  :PlugDiff<cr>$/;"	m
DiffThis	nvim/init.vim	/^function! DiffThis()$/;"	f
FILTER	ranger/commands_full.py	/^    FILTER          = 'f'$/;"	v	class:scout
FILTER_DIRS	ranger/commands_full.py	/^    FILTER_DIRS  = 'd'$/;"	v	class:filter_inode_type
FILTER_FILES	ranger/commands_full.py	/^    FILTER_FILES = 'f'$/;"	v	class:filter_inode_type
FILTER_LINKS	ranger/commands_full.py	/^    FILTER_LINKS = 'l'$/;"	v	class:filter_inode_type
H	nvim/init.vim	/^map H [{$/;"	m
I	.tmux.conf	/^setw -g window-status-current-format " #F#I:#W#F "$/;"	k
I	.tmux.conf	/^setw -g window-status-format " #F#I:#W#F "$/;"	k
I	nvim/init.vim	/^vmap I :norm I$/;"	m
IGNORE_CASE	ranger/commands_full.py	/^    IGNORE_CASE     = 'i'$/;"	v	class:scout
INVERT	ranger/commands_full.py	/^    INVERT          = 'v'$/;"	v	class:scout
InsertBookmarks	nvim/init.vim	/^function! InsertBookmarks()$/;"	f
J	nvim/init.vim	/^map J <c-d>$/;"	m
K	nvim/init.vim	/^map K <c-u>$/;"	m
KEEP_OPEN	ranger/commands_full.py	/^    KEEP_OPEN       = 'k'$/;"	v	class:scout
L	nvim/autoload/plug.vim	/^    nnoremap <silent> <buffer> L :call <SID>status_load(line('.'))<cr>$/;"	m
L	nvim/autoload/plug.vim	/^    xnoremap <silent> <buffer> L :call <SID>status_load(line('.'))<cr>$/;"	m
L	nvim/init.vim	/^map L ]}$/;"	m
LetMeDuckThatForYou	nvim/init.vim	/^function! LetMeDuckThatForYou(defaultPhrase)$/;"	f
MARK	ranger/commands_full.py	/^    MARK            = 'm'$/;"	v	class:scout
N	nvim/init.vim	/^nnoremap <silent> N Nzz$/;"	m
OPEN_ON_ENTER	ranger/commands_full.py	/^    OPEN_ON_ENTER   = 'e'$/;"	v	class:scout
PATH_RE	ranger/commands_full.py	/^    PATH_RE = re.compile(r'^\\s*path="?(.*?)"?\\s*$')$/;"	v	class:setlocal
PERM_FILTER	ranger/commands_full.py	/^    PERM_FILTER     = 'p'$/;"	v	class:scout
Plug	nvim/autoload/plug.vim	/^  command! -nargs=+ -bar Plug call plug#(<args>)$/;"	c
PlugClean	nvim/autoload/plug.vim	/^  command! -nargs=0 -bar -bang PlugClean call s:clean(<bang>0)$/;"	c
PlugDiff	nvim/autoload/plug.vim	/^  command! -nargs=0 -bar PlugDiff    call s:diff()$/;"	c
PlugInstall	nvim/autoload/plug.vim	/^  command! -nargs=* -bar -bang -complete=customlist,s:names PlugInstall call s:install(<bang>0, /;"	c
PlugLOD	nvim/autoload/plug.vim	/^    augroup PlugLOD$/;"	a
PlugSnapshot	nvim/autoload/plug.vim	/^  command! -nargs=? -bar -bang -complete=file PlugSnapshot call s:snapshot(<bang>0, <f-args>)$/;"	c
PlugStatus	nvim/autoload/plug.vim	/^  command! -nargs=0 -bar PlugStatus  call s:status()$/;"	c
PlugUpdate	nvim/autoload/plug.vim	/^  command! -nargs=* -bar -bang -complete=customlist,s:names PlugUpdate  call s:update(<bang>0, [/;"	c
PlugUpgrade	nvim/autoload/plug.vim	/^  command! -nargs=0 -bar PlugUpgrade if s:upgrade() | execute 'source' s:esc(s:me) | endif$/;"	c
R	nvim/autoload/plug.vim	/^  nnoremap <silent> <buffer> R  :call <SID>retry()<cr>$/;"	m
Relpath	nvim/init.vim	/^function! Relpath(filename)$/;"	f
Rg	nvim/init.vim	/^command! -bang -nargs=* Rg$/;"	c
S	nvim/autoload/plug.vim	/^  nnoremap <silent> <buffer> S  :PlugStatus<cr>$/;"	m
SMART_CASE	ranger/commands_full.py	/^    SMART_CASE      = 's'$/;"	v	class:scout
SM_GLOB	ranger/commands_full.py	/^    SM_GLOB         = 'g'$/;"	v	class:scout
SM_LETTERSKIP	ranger/commands_full.py	/^    SM_LETTERSKIP   = 'l'$/;"	v	class:scout
SM_REGEX	ranger/commands_full.py	/^    SM_REGEX        = 'r'$/;"	v	class:scout
SessionLoad	Session.vim	/^let SessionLoad = 1$/;"	v
SessionLoad	fish/Session.vim	/^let SessionLoad = 1$/;"	v
SetScratchBuffer	nvim/init.vim	/^function! SetScratchBuffer()$/;"	f
StripTrailingWhitespace	nvim/init.vim	/^function! StripTrailingWhitespace ()$/;"	f
ToggleGrepperBuffersMode	nvim/init.vim	/^function! ToggleGrepperBuffersMode()$/;"	f
U	nvim/autoload/plug.vim	/^  nnoremap <silent> <buffer> U  :call <SID>status_update()<cr>$/;"	m
U	nvim/autoload/plug.vim	/^  xnoremap <silent> <buffer> U  :call <SID>status_update()<cr>$/;"	m
UNMARK	ranger/commands_full.py	/^    UNMARK          = 'M'$/;"	v	class:scout
UrlEncode	nvim/init.vim	/^function! UrlEncode(string)$/;"	f
VimuxRunFromClipboard	nvim/init.vim	/^function! VimuxRunFromClipboard()$/;"	f
X	nvim/autoload/plug.vim	/^    nnoremap <silent> <buffer> X :call <SID>revert()<cr>$/;"	m
X	ranger/rifle.conf	/^ext s[wmf]c, has snes9x-gtk,X = snes9x-gtk "$1"$/;"	k
Y	nvim/init.vim	/^noremap Y y\$$/;"	m
ZoomToggle	nvim/init.vim	/^command! ZoomToggle call s:ZoomToggle()$/;"	c
[[	nvim/autoload/plug.vim	/^  nnoremap <silent> <buffer> [[ :silent! call <SID>section('b')<cr>$/;"	m
[a	nvim/init.vim	/^nmap [a :previous<CR>$/;"	m
[b	nvim/init.vim	/^nmap [b :bprevious<CR>$/;"	m
[q	nvim/init.vim	/^nmap [q :cprev<CR>$/;"	m
\x17\x06	nvim/init.vim	/^map  _|$/;"	m
\x17f	nvim/init.vim	/^map f _<bar>$/;"	m
\x1F	nvim/init.vim	/^nmap   <Plug>CommentaryLine$/;"	m
\x1F	nvim/init.vim	/^vmap   <Plug>Commentary$/;"	m
]]	nvim/autoload/plug.vim	/^  nnoremap <silent> <buffer> ]] :silent! call <SID>section('')<cr>$/;"	m
]a	nvim/init.vim	/^nmap ]a :next<CR>$/;"	m
]b	nvim/init.vim	/^nmap ]b :bnext<CR>$/;"	m
]q	nvim/init.vim	/^nmap ]q :cnext<CR>$/;"	m
_	nvim/init.vim	/^nnoremap _ :execute 'edit ' . getcwd()<CR>$/;"	m
__init__	ranger/commands_full.py	/^    def __init__(self, *args, **kws):$/;"	m	class:scout
_build_regex	ranger/commands_full.py	/^    def _build_regex(self):$/;"	m	class:scout
_command_name	ranger/commands_full.py	/^    _command_name = "meta"$/;"	v	class:prompt_metadata
_console_chain	ranger/commands_full.py	/^    _console_chain = None$/;"	v	class:prompt_metadata
_count	ranger/commands_full.py	/^    def _count(self, move=False, offset=0):$/;"	m	class:scout
_fill_console	ranger/commands_full.py	/^    def _fill_console(self, key):$/;"	m	class:prompt_metadata
_get_app_flags_mode	ranger/commands_full.py	/^    def _get_app_flags_mode(self, string):$/;"	m	class:open_with
_is_app	ranger/commands_full.py	/^    def _is_app(self, arg):$/;"	m	class:open_with
_is_flags	ranger/commands_full.py	/^    def _is_flags(self, arg):$/;"	m	class:open_with
_is_mode	ranger/commands_full.py	/^    def _is_mode(self, arg):$/;"	m	class:open_with
_process_command_stack	ranger/commands_full.py	/^    def _process_command_stack(self):$/;"	m	class:prompt_metadata
_question_callback	ranger/commands_full.py	/^    def _question_callback(self, files, answer):$/;"	m	class:delete
alias	ranger/commands_full.py	/^class alias(Command):$/;"	c
allow_abbrev	ranger/commands_full.py	/^    allow_abbrev = False$/;"	v	class:delete
allow_abbrev	ranger/commands_full.py	/^    allow_abbrev = False$/;"	v	class:quit_bang
backward	ranger/rc.conf	/^cmap <A-d>        eval fm.ui.console.delete_word(backward=False)$/;"	k
badwolf_tex	badwolf.vim	/^augroup badwolf_tex$/;"	a
bulkrename	ranger/commands_full.py	/^class bulkrename(Command):$/;"	c
callback	ranger/commands_full.py	/^        def callback(answer):$/;"	f	member:help_.execute	file:
cancel	ranger/commands_full.py	/^    def cancel(self):$/;"	m	class:scout
cd	ranger/commands_full.py	/^class cd(Command):$/;"	c
chain	ranger/commands_full.py	/^class chain(Command):$/;"	c
chmod	ranger/commands_full.py	/^class chmod(Command):$/;"	c
class	.ctags	/^--regex-JavaScript=\/^[ \\t]*with.*\\(([a-zA-Z]+)\\)\/\\1\/f,class\/$/;"	k	langdef:js
class	.ctags	/^--regex-JavaScript=\/^class[ ]([a-zA-Z]+).*\/\\1\/f,class\/$/;"	k	langdef:js
class	.ctags	/^--regex-JavaScript=\/^export[ ]const[ ]([a-zA-Z]+).*\/\\1\/f,class\/$/;"	k	langdef:js
class	.ctags	/^--regex-JavaScript=\/^export[ ]default.*component=\\{([a-zA-Z]+)\\}.*\/\\1\/f,class\/$/;"	k	langdef:js
class	.ctags	/^--regex-JavaScript=\/^export[ ]default[ ]([a-zA-Z]+);\/\\1\/f,class\/$/;"	k	langdef:js
class	.ctags	/^--regex-JavaScript=\/^export[ ]default[ ].*\\(([a-zA-Z]+)\\);\/\\1\/f,class\/$/;"	k	langdef:js
class	.ctags	/^--regex-js=\/^[ \\t]*with.*\\(([a-zA-Z]+)\\)\/\\1\/f,class\/$/;"	k	langdef:js
class	.ctags	/^--regex-js=\/^class[ ]([a-zA-Z]+).*\/\\1\/f,class\/$/;"	k	langdef:js
class	.ctags	/^--regex-js=\/^export[ ]const[ ]([a-zA-Z]+).*\/\\1\/f,class\/$/;"	k	langdef:js
class	.ctags	/^--regex-js=\/^export[ ]default.*component=\\{([a-zA-Z]+)\\}.*\/\\1\/f,class\/$/;"	k	langdef:js
class	.ctags	/^--regex-js=\/^export[ ]default[ ]([a-zA-Z]+);\/\\1\/f,class\/$/;"	k	langdef:js
class	.ctags	/^--regex-js=\/^export[ ]default[ ].*\\(([a-zA-Z]+)\\);\/\\1\/f,class\/$/;"	k	langdef:js
cmap	ranger/commands_full.py	/^class cmap(map_):$/;"	c
colors_name	badwolf.vim	/^let colors_name = "badwolf"$/;"	v
config	nvim/init.vim	/^augroup config$/;"	a
console	ranger/commands_full.py	/^class console(Command):$/;"	c
context	ranger/commands_full.py	/^    context = 'browser'$/;"	v	class:alias
context	ranger/commands_full.py	/^    context = 'browser'$/;"	v	class:copymap
context	ranger/commands_full.py	/^    context = 'browser'$/;"	v	class:cunmap
context	ranger/commands_full.py	/^    context = 'browser'$/;"	v	class:map_
context	ranger/commands_full.py	/^    context = 'browser'$/;"	v	class:unmap
context	ranger/commands_full.py	/^    context = 'console'$/;"	v	class:cmap
context	ranger/commands_full.py	/^    context = 'console'$/;"	v	class:copycmap
context	ranger/commands_full.py	/^    context = 'pager'$/;"	v	class:copypmap
context	ranger/commands_full.py	/^    context = 'pager'$/;"	v	class:pmap
context	ranger/commands_full.py	/^    context = 'pager'$/;"	v	class:punmap
context	ranger/commands_full.py	/^    context = 'taskview'$/;"	v	class:copytmap
context	ranger/commands_full.py	/^    context = 'taskview'$/;"	v	class:tmap
context	ranger/commands_full.py	/^    context = 'taskview'$/;"	v	class:tunmap
copy_buffer_filename	ranger/commands_full.py	/^    copy_buffer_filename = 'copy_buffer'$/;"	v	class:load_copy_buffer
copy_buffer_filename	ranger/commands_full.py	/^    copy_buffer_filename = 'copy_buffer'$/;"	v	class:save_copy_buffer
copycmap	ranger/commands_full.py	/^class copycmap(copymap):$/;"	c
copymap	ranger/commands_full.py	/^class copymap(Command):$/;"	c
copypmap	ranger/commands_full.py	/^class copypmap(copymap):$/;"	c
copytmap	ranger/commands_full.py	/^class copytmap(copymap):$/;"	c
create_symlink	install.sh	/^create_symlink() {$/;"	f
cunmap	ranger/commands_full.py	/^class cunmap(unmap):$/;"	c
d	nvim/autoload/plug.vim	/^      nnoremap <silent> <buffer> d :set opfunc=<sid>delete_op<cr>g@$/;"	m
d	nvim/autoload/plug.vim	/^      xnoremap <silent> <buffer> d :<c-u>call <sid>delete_op(visualmode(), 1)<cr>$/;"	m
dd	nvim/autoload/plug.vim	/^      nmap     <silent> <buffer> dd d_$/;"	m
default_linemode	ranger/commands_full.py	/^class default_linemode(Command):$/;"	c
delete	ranger/commands_full.py	/^class delete(Command):$/;"	c
dirarg	ranger/rc.conf	/^map dG  eval fm.cut(dirarg=dict(to=-1), narg=quantifier)$/;"	k
dirarg	ranger/rc.conf	/^map dgg eval fm.cut(dirarg=dict(to=0), narg=quantifier)$/;"	k
dirarg	ranger/rc.conf	/^map dj  eval fm.cut(dirarg=dict(down=1), narg=quantifier)$/;"	k
dirarg	ranger/rc.conf	/^map dk  eval fm.cut(dirarg=dict(up=1), narg=quantifier)$/;"	k
dirarg	ranger/rc.conf	/^map yG  eval fm.copy(dirarg=dict(to=-1), narg=quantifier)$/;"	k
dirarg	ranger/rc.conf	/^map ygg eval fm.copy(dirarg=dict(to=0), narg=quantifier)$/;"	k
dirarg	ranger/rc.conf	/^map yj  eval fm.copy(dirarg=dict(down=1), narg=quantifier)$/;"	k
dirarg	ranger/rc.conf	/^map yk  eval fm.copy(dirarg=dict(up=1), narg=quantifier)$/;"	k
dirvish	nvim/init.vim	/^augroup dirvish$/;"	a
do_mark	ranger/commands_full.py	/^    do_mark = False$/;"	v	class:unmark_tag
do_mark	ranger/commands_full.py	/^    do_mark = True$/;"	v	class:mark_tag
dump	ranger/scope.sh	/^dump() { \/bin\/echo "$output"; }$/;"	f
echo	ranger/commands_full.py	/^class echo(Command):$/;"	c
edit	ranger/commands_full.py	/^class edit(Command):$/;"	c
esc	ranger/commands_full.py	/^        from ranger.ext.shell_escape import shell_escape as esc$/;"	x	member:bulkrename.execute	file:
escape_macros_for_shell	ranger/commands_full.py	/^    escape_macros_for_shell = True$/;"	v	class:delete
escape_macros_for_shell	ranger/commands_full.py	/^    escape_macros_for_shell = True$/;"	v	class:shell
eval_	ranger/commands_full.py	/^class eval_(Command):$/;"	c
executable	ranger/rifle.conf	/^mime application\/x-executable = "$1"$/;"	k
execute	ranger/commands.py	/^    def execute(self):$/;"	m	class:my_edit
execute	ranger/commands_full.py	/^    def execute(self):$/;"	m	class:alias
execute	ranger/commands_full.py	/^    def execute(self):$/;"	m	class:bulkrename
execute	ranger/commands_full.py	/^    def execute(self):$/;"	m	class:cd
execute	ranger/commands_full.py	/^    def execute(self):$/;"	m	class:chain
execute	ranger/commands_full.py	/^    def execute(self):$/;"	m	class:chmod
execute	ranger/commands_full.py	/^    def execute(self):$/;"	m	class:console
execute	ranger/commands_full.py	/^    def execute(self):$/;"	m	class:copymap
execute	ranger/commands_full.py	/^    def execute(self):$/;"	m	class:default_linemode
execute	ranger/commands_full.py	/^    def execute(self):$/;"	m	class:delete
execute	ranger/commands_full.py	/^    def execute(self):$/;"	m	class:echo
execute	ranger/commands_full.py	/^    def execute(self):$/;"	m	class:edit
execute	ranger/commands_full.py	/^    def execute(self):$/;"	m	class:eval_
execute	ranger/commands_full.py	/^    def execute(self):$/;"	m	class:filter_inode_type
execute	ranger/commands_full.py	/^    def execute(self):$/;"	m	class:flat
execute	ranger/commands_full.py	/^    def execute(self):$/;"	m	class:grep
execute	ranger/commands_full.py	/^    def execute(self):$/;"	m	class:help_
execute	ranger/commands_full.py	/^    def execute(self):$/;"	m	class:linemode
execute	ranger/commands_full.py	/^    def execute(self):$/;"	m	class:load_copy_buffer
execute	ranger/commands_full.py	/^    def execute(self):$/;"	m	class:map_
execute	ranger/commands_full.py	/^    def execute(self):$/;"	m	class:mark_tag
execute	ranger/commands_full.py	/^    def execute(self):$/;"	m	class:meta
execute	ranger/commands_full.py	/^    def execute(self):$/;"	m	class:mkdir
execute	ranger/commands_full.py	/^    def execute(self):$/;"	m	class:open_with
execute	ranger/commands_full.py	/^    def execute(self):$/;"	m	class:prompt_metadata
execute	ranger/commands_full.py	/^    def execute(self):$/;"	m	class:quit
execute	ranger/commands_full.py	/^    def execute(self):$/;"	m	class:quitall
execute	ranger/commands_full.py	/^    def execute(self):$/;"	m	class:relink
execute	ranger/commands_full.py	/^    def execute(self):$/;"	m	class:rename
execute	ranger/commands_full.py	/^    def execute(self):$/;"	m	class:rename_append
execute	ranger/commands_full.py	/^    def execute(self):$/;"	m	class:save_copy_buffer
execute	ranger/commands_full.py	/^    def execute(self):$/;"	m	class:scout
execute	ranger/commands_full.py	/^    def execute(self):$/;"	m	class:set_
execute	ranger/commands_full.py	/^    def execute(self):$/;"	m	class:setintag
execute	ranger/commands_full.py	/^    def execute(self):$/;"	m	class:setlocal
execute	ranger/commands_full.py	/^    def execute(self):$/;"	m	class:shell
execute	ranger/commands_full.py	/^    def execute(self):$/;"	m	class:stage
execute	ranger/commands_full.py	/^    def execute(self):$/;"	m	class:terminal
execute	ranger/commands_full.py	/^    def execute(self):$/;"	m	class:touch
execute	ranger/commands_full.py	/^    def execute(self):$/;"	m	class:unmap
execute	ranger/commands_full.py	/^    def execute(self):$/;"	m	class:unstage
ext 1	ranger/rifle.conf	/^ext 1                         = man "$1"$/;"	k
ext exe	ranger/rifle.conf	/^ext exe                       = wine "$1"$/;"	k
ext js	ranger/rifle.conf	/^ext js  = node -- "$1"$/;"	k
ext php	ranger/rifle.conf	/^ext php = php -- "$1"$/;"	k
ext pl	ranger/rifle.conf	/^ext pl  = perl -- "$1"$/;"	k
ext py	ranger/rifle.conf	/^ext py  = python -- "$1"$/;"	k
ext rb	ranger/rifle.conf	/^ext rb  = ruby -- "$1"$/;"	k
ext sh	ranger/rifle.conf	/^ext sh  = sh -- "$1"$/;"	k
filemarks	nvim/init.vim	/^augroup filemarks$/;"	a
filetypedetect	nvim/autoload/plug.vim	/^        augroup filetypedetect$/;"	a
filter_inode_type	ranger/commands_full.py	/^class filter_inode_type(Command):$/;"	c
flat	ranger/commands_full.py	/^class flat(Command):$/;"	c
fugitive	nvim/init.vim	/^augroup fugitive$/;"	a
function	.ctags	/^--regex-JavaScript=\/^[ \\t]+const[ ]([a-zA-Z]+)[ ]=[ ].*=>\/\\1\/f,function\/$/;"	k	langdef:js
function	.ctags	/^--regex-JavaScript=\/^[ \\t]+let[ ]([a-zA-Z]+)[ ]=[ ].*=>\/\\1\/f,function\/$/;"	k	langdef:js
function	.ctags	/^--regex-JavaScript=\/^[ \\t]+var[ ]([a-zA-Z]+)[ ]=[ ].*=>\/\\1\/f,function\/$/;"	k	langdef:js
function	.ctags	/^--regex-JavaScript=\/^[ \\t]{2}([a-zA-Z]+)[ ]=[ ].*\/\\1\/f,function\/$/;"	k	langdef:js
function	.ctags	/^--regex-JavaScript=\/^[ \\t]{2}([a-zA-Z]+)\\(.*\\{\/\\1\/f,function\/$/;"	k	langdef:js
function	.ctags	/^--regex-js=\/^[ \\t]+const[ ]([a-zA-Z]+)[ ]=[ ].*=>\/\\1\/f,function\/$/;"	k	langdef:js
function	.ctags	/^--regex-js=\/^[ \\t]+let[ ]([a-zA-Z]+)[ ]=[ ].*=>\/\\1\/f,function\/$/;"	k	langdef:js
function	.ctags	/^--regex-js=\/^[ \\t]+var[ ]([a-zA-Z]+)[ ]=[ ].*=>\/\\1\/f,function\/$/;"	k	langdef:js
function	.ctags	/^--regex-js=\/^[ \\t]{2}([a-zA-Z]+)[ ]=[ ].*\/\\1\/f,function\/$/;"	k	langdef:js
function	.ctags	/^--regex-js=\/^[ \\t]{2}([a-zA-Z]+)\\(.*\\{\/\\1\/f,function\/$/;"	k	langdef:js
g:SuperTabDefaultCompletionType	nvim/init.vim	/^let g:SuperTabDefaultCompletionType = '<C-n>'$/;"	v
g:UltiSnipsEditSplit	nvim/init.vim	/^let g:UltiSnipsEditSplit="vertical"$/;"	v
g:UltiSnipsEnableSnipMate	nvim/init.vim	/^let g:UltiSnipsEnableSnipMate = 0$/;"	v
g:UltiSnipsExpandTrigger	nvim/init.vim	/^let g:UltiSnipsExpandTrigger = "<tab>"$/;"	v
g:UltiSnipsJumpBackwardTrigger	nvim/init.vim	/^let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"$/;"	v
g:UltiSnipsJumpForwardTrigger	nvim/init.vim	/^let g:UltiSnipsJumpForwardTrigger = "<tab>"$/;"	v
g:UltiSnipsSnippetDirectories	nvim/init.vim	/^let g:UltiSnipsSnippetDirectories = ['UltiSnips', $HOME.'\/dotfiles\/UltiSnips']$/;"	v
g:UltiSnipsSnippetDirectories	nvim/init.vim	/^let g:UltiSnipsSnippetDirectories = ['~\/.vim\/UltiSnips', 'UltiSnips']$/;"	v
g:UltiSnipsSnippetsDir	nvim/init.vim	/^let g:UltiSnipsSnippetsDir = $HOME."\/dotfiles\/UltiSnips"$/;"	v
g:VimuxHeight	nvim/init.vim	/^let g:VimuxHeight = "20"$/;"	v
g:VimuxPromptString	nvim/init.vim	/^let g:VimuxPromptString = "Vimux>  $ "$/;"	v
g:_plug_bang	nvim/autoload/plug.vim	/^    let g:_plug_bang = '!'.escape(cmd, '#!%')$/;"	v
g:airline#extensions#tabline#enabled	nvim/init.vim	/^let g:airline#extensions#tabline#enabled = 0$/;"	v
g:airline_inactive_collapse	nvim/init.vim	/^let g:airline_inactive_collapse = 0$/;"	v
g:airline_powerline_fonts	nvim/init.vim	/^let g:airline_powerline_fonts = 0$/;"	v
g:airline_section_a	nvim/init.vim	/^let g:airline_section_a = '%{expand("%:p:t")}'$/;"	v
g:airline_section_b	nvim/init.vim	/^let g:airline_section_b = '%{expand("%:p:h:t")}'$/;"	v
g:airline_section_c	nvim/init.vim	/^let g:airline_section_c = '%{expand("%:p:h:h:t")}'$/;"	v
g:airline_section_error	nvim/init.vim	/^let g:airline_section_error = ''$/;"	v
g:airline_section_warning	nvim/init.vim	/^let g:airline_section_warning = ''$/;"	v
g:airline_section_x	nvim/init.vim	/^let g:airline_section_x = ''$/;"	v
g:airline_section_y	nvim/init.vim	/^let g:airline_section_y = ''$/;"	v
g:airline_section_z	nvim/init.vim	/^let g:airline_section_z = ''$/;"	v
g:airline_theme	nvim/init.vim	/^let g:airline_theme='jellybeans'$/;"	v
g:ale_fixers	nvim/init.vim	/^let g:ale_fixers = {$/;"	v
g:ale_javascript_eslint_executable	nvim/init.vim	/^let g:ale_javascript_eslint_executable='\/usr\/local\/bin\/eslint'$/;"	v
g:ale_javascript_eslint_use_global	nvim/init.vim	/^let g:ale_javascript_eslint_use_global = 1$/;"	v
g:badwolf_css_props_highlight	badwolf.vim	/^    let g:badwolf_css_props_highlight = 0$/;"	v
g:badwolf_html_link_underline	badwolf.vim	/^    let g:badwolf_html_link_underline = 1$/;"	v
g:bufExplorerDisableDefaultKeyMapping	nvim/init.vim	/^let g:bufExplorerDisableDefaultKeyMapping = 1$/;"	v
g:codi#aliases	nvim/init.vim	/^let g:codi#aliases = {$/;"	v
g:colors_name	null.vim	/^let g:colors_name="null"$/;"	v
g:colors_name	sift.vim	/^let g:colors_name="sift"$/;"	v
g:ctrlsf_confirm_save	nvim/init.vim	/^let g:ctrlsf_confirm_save = 0$/;"	v
g:dash_map	nvim/init.vim	/^let g:dash_map = {$/;"	v
g:deoplete#auto_complete_delay	nvim/init.vim	/^let g:deoplete#auto_complete_delay = 0$/;"	v
g:deoplete#buffer#require_same_filetype	nvim/init.vim	/^let g:deoplete#buffer#require_same_filetype = 0$/;"	v
g:deoplete#enable_at_startup	nvim/init.vim	/^let g:deoplete#enable_at_startup = 1$/;"	v
g:deoplete#enable_camel_case	nvim/init.vim	/^let g:deoplete#enable_camel_case = 1$/;"	v
g:deoplete#enable_ignore_case	nvim/init.vim	/^let g:deoplete#enable_ignore_case = 1$/;"	v
g:deoplete#enable_refresh_always	nvim/init.vim	/^let g:deoplete#enable_refresh_always = 1$/;"	v
g:deoplete#enable_smart_case	nvim/init.vim	/^let g:deoplete#enable_smart_case = 1$/;"	v
g:deoplete#file#enable_buffer_path	nvim/init.vim	/^let g:deoplete#file#enable_buffer_path = 0$/;"	v
g:deoplete#max_abbr_width	nvim/init.vim	/^let g:deoplete#max_abbr_width = 0$/;"	v
g:deoplete#max_menu_width	nvim/init.vim	/^let g:deoplete#max_menu_width = 0$/;"	v
g:deoplete#omni#functions	nvim/init.vim	/^let g:deoplete#omni#functions = {}$/;"	v
g:deoplete#omni#functions	nvim/init.vim	/^let g:deoplete#omni#functions.javascript = [$/;"	v
g:deoplete#omni#input_patterns	nvim/init.vim	/^let g:deoplete#omni#input_patterns = get(g:,'deoplete#omni#input_patterns',{})$/;"	v
g:deoplete#sources#ternjs#case_insensitive	nvim/init.vim	/^let g:deoplete#sources#ternjs#case_insensitive = 1$/;"	v
g:deoplete#sources#ternjs#depths	nvim/init.vim	/^let g:deoplete#sources#ternjs#depths = 1$/;"	v
g:deoplete#sources#ternjs#docs	nvim/init.vim	/^let g:deoplete#sources#ternjs#docs = 1$/;"	v
g:deoplete#sources#ternjs#filetypes	nvim/init.vim	/^let g:deoplete#sources#ternjs#filetypes = [$/;"	v
g:deoplete#sources#ternjs#in_literal	nvim/init.vim	/^let g:deoplete#sources#ternjs#in_literal = 1$/;"	v
g:deoplete#sources#ternjs#include_keywords	nvim/init.vim	/^let g:deoplete#sources#ternjs#include_keywords = 1$/;"	v
g:deoplete#sources#ternjs#types	nvim/init.vim	/^let g:deoplete#sources#ternjs#types = 1$/;"	v
g:dirvish_mode	nvim/init.vim	/^let g:dirvish_mode = ':sort ,^.*[\\\/],'$/;"	v
g:dirvish_relative_paths	nvim/init.vim	/^let g:dirvish_relative_paths=1$/;"	v
g:gitgutter_highlight_lines	nvim/init.vim	/^let g:gitgutter_highlight_lines = 0$/;"	v
g:gitgutter_map_keys	nvim/init.vim	/^let g:gitgutter_map_keys = 0$/;"	v
g:grepper	nvim/init.vim	/^    let g:grepper.buffers = 0$/;"	v
g:grepper	nvim/init.vim	/^    let g:grepper.buffers = 1$/;"	v
g:grepper	nvim/init.vim	/^let g:grepper = {}$/;"	v
g:grepper	nvim/init.vim	/^let g:grepper.jump = 0$/;"	v
g:grepper	nvim/init.vim	/^let g:grepper.stop = 500$/;"	v
g:gutentags_ctags_exclude	nvim/init.vim	/^let g:gutentags_ctags_exclude = ['*node_modules*', '*bower_components*', 'tmp*', 'temp*', 'packa/;"	v
g:loaded_plug	nvim/autoload/plug.vim	/^let g:loaded_plug = 1$/;"	v
g:neoformat_basic_format_align	nvim/init.vim	/^let g:neoformat_basic_format_align = 1$/;"	v
g:neoformat_basic_format_retab	nvim/init.vim	/^let g:neoformat_basic_format_retab = 1$/;"	v
g:neoformat_basic_format_trim	nvim/init.vim	/^let g:neoformat_basic_format_trim = 1$/;"	v
g:neoformat_enabled_javascript	nvim/init.vim	/^let g:neoformat_enabled_javascript = ['prettier']$/;"	v
g:neoformat_javascript_prettier	nvim/init.vim	/^let g:neoformat_javascript_prettier = {$/;"	v
g:neoformat_only_msg_on_error	nvim/init.vim	/^let g:neoformat_only_msg_on_error = 1$/;"	v
g:neoformat_try_formatprg	nvim/init.vim	/^let g:neoformat_try_formatprg = 1$/;"	v
g:neoformat_verbose	nvim/init.vim	/^let g:neoformat_verbose = 0$/;"	v
g:netrw_keepdir	nvim/init.vim	/^let g:netrw_keepdir=0$/;"	v
g:netrw_localrmdir	nvim/init.vim	/^let g:netrw_localrmdir='rm -r'$/;"	v
g:plug_home	nvim/autoload/plug.vim	/^  let g:plug_home = home$/;"	v
g:plugs	nvim/autoload/plug.vim	/^    let g:plugs[name] = spec$/;"	v
g:plugs	nvim/autoload/plug.vim	/^  let g:plugs = {}$/;"	v
g:plugs_order	nvim/autoload/plug.vim	/^  let g:plugs_order = []$/;"	v
g:plugs_order	nvim/autoload/plug.vim	/^  let g:plugs_order = get(g:, 'plugs_order', keys(g:plugs))$/;"	v
g:pymode_options_max_line_length	nvim/init.vim	/^let g:pymode_options_max_line_length=120$/;"	v
g:python_highlight_all	nvim/init.vim	/^let g:python_highlight_all=1$/;"	v
g:rooter_patterns	nvim/init.vim	/^let g:rooter_patterns = ['app.js']$/;"	v
g:sneak#s_next	nvim/init.vim	/^let g:sneak#s_next = 1$/;"	v
g:sneak#target_labels	nvim/init.vim	/^let g:sneak#target_labels =   "sdfioweqertphjklzxcvnm"$/;"	v
g:surround_105	nvim/init.vim	/^let g:surround_105 = "if (\\1if statement: \\1) {\\r}"$/;"	v
g:tagbar_autoclose	nvim/init.vim	/^let g:tagbar_autoclose = 0$/;"	v
g:tagbar_autofocus	nvim/init.vim	/^let g:tagbar_autofocus = 1$/;"	v
g:tagbar_case_insensitive	nvim/init.vim	/^let g:tagbar_case_insensitive = 1$/;"	v
g:tagbar_compact	nvim/init.vim	/^let g:tagbar_compact = 1$/;"	v
g:tagbar_sort	nvim/init.vim	/^let g:tagbar_sort = 0$/;"	v
g:tern#filetypes	nvim/init.vim	/^let g:tern#filetypes = [ 'jsx', 'javascript.jsx', 'vue' ]$/;"	v
g:test#javascript#jest#executable	nvim/init.vim	/^let g:test#javascript#jest#executable = 'npm test'$/;"	v
g:test#javascript#jest#file_pattern	nvim/init.vim	/^let g:test#javascript#jest#file_pattern = '.test.js$'$/;"	v
g:test#javascript#karma#file_pattern	nvim/init.vim	/^let g:test#javascript#karma#file_pattern = 'jest'$/;"	v
g:test#runners	nvim/init.vim	/^let g:test#runners = {'javascript': ['jest']}$/;"	v
g:test#strategy	nvim/init.vim	/^let g:test#strategy = "neovim"$/;"	v
g:this_obsession	Session.vim	/^let g:this_obsession = v:this_session$/;"	v
g:this_obsession_status	Session.vim	/^let g:this_obsession_status = 2$/;"	v
g:this_session	Session.vim	/^let g:this_session = v:this_session$/;"	v
g:tmux_navigator_disable_when_zoomed	nvim/init.vim	/^let g:tmux_navigator_disable_when_zoomed = 1$/;"	v
g:tmux_navigator_save_on_switch	nvim/init.vim	/^let g:tmux_navigator_save_on_switch = 2$/;"	v
g:used_javascript_libs	nvim/init.vim	/^let g:used_javascript_libs = 'lodash,react,flux,d3'$/;"	v
g:vim_markdown_folding_disabled	nvim/init.vim	/^let g:vim_markdown_folding_disabled = 0$/;"	v
g:vim_markdown_folding_level	nvim/init.vim	/^let g:vim_markdown_folding_level = 2$/;"	v
g:vimwiki_map_prefix	nvim/init.vim	/^let g:vimwiki_map_prefix = '<Leader>e'$/;"	v
gr	nvim/init.vim	/^nmap gr "hyiw:GrepperAg <c-r>h<CR>$/;"	m
grep	ranger/commands_full.py	/^class grep(Command):$/;"	c
gsh	nvim/init.vim	/^map gsh :topleft split ~\/notes\/habits.scratch.md<CR>$/;"	m
gsp	nvim/init.vim	/^map gsp :topleft split ~\/notes\/personal.scratch.md<CR>$/;"	m
gss	nvim/init.vim	/^map gss :topleft split ~\/notes\/task.scratch.md<CR>$/;"	m
gsw	nvim/init.vim	/^map gsw :topleft split ~\/notes\/work.scratch.md<CR>$/;"	m
gt	nvim/init.vim	/^map gt :Toch<CR>$/;"	m
gt	nvim/init.vim	/^vmap gt :Tabularize \/$/;"	m
g}	nvim/init.vim	/^nnoremap g} :split<CR>gd$/;"	m
help_	ranger/commands_full.py	/^class help_(Command):$/;"	c
install_cmake	install.sh	/^install_cmake() {$/;"	f
is_directory_with_files	ranger/commands_full.py	/^        def is_directory_with_files(f):$/;"	f	member:delete.execute	file:
is_fzf	.tmux.conf	/^is_fzf="ps -o state= -o comm= -t '#{pane_tty}' \\$/;"	k
is_vim	.tmux.conf	/^is_vim="ps -o state= -o comm= -t '#{pane_tty}' \\$/;"	k
js	.ctags	/^--langdef=js$/;"	l
left	ranger/rc.conf	/^cmap <a-left>   eval fm.ui.console.move_word(left=1)$/;"	k
left	ranger/rc.conf	/^cmap <left>  eval fm.ui.console.move(left=1)$/;"	k
linemode	ranger/commands_full.py	/^class linemode(default_linemode):$/;"	c
load_copy_buffer	ranger/commands_full.py	/^class load_copy_buffer(Command):$/;"	c
map	ranger/rc.conf	/^map :  console$/;"	k
map	ranger/rc.conf	/^map =  chmod$/;"	k
map J  move down	ranger/rc.conf	/^map J  move down=0.5  pages=True$/;"	k
map K  move up	ranger/rc.conf	/^map K  move up=0.5    pages=True$/;"	k
map N  search_next forward	ranger/rc.conf	/^map N  search_next forward=False$/;"	k
map ca search_next order	ranger/rc.conf	/^map ca search_next order=atime$/;"	k
map cc search_next order	ranger/rc.conf	/^map cc search_next order=ctime$/;"	k
map ci search_next order	ranger/rc.conf	/^map ci search_next order=mimetype$/;"	k
map cm search_next order	ranger/rc.conf	/^map cm search_next order=mtime$/;"	k
map cs search_next order	ranger/rc.conf	/^map cs search_next order=size$/;"	k
map ct search_next order	ranger/rc.conf	/^map ct search_next order=tag$/;"	k
map da cut mode	ranger/rc.conf	/^map da cut mode=add$/;"	k
map dr cut mode	ranger/rc.conf	/^map dr cut mode=remove$/;"	k
map dt cut mode	ranger/rc.conf	/^map dt cut mode=toggle$/;"	k
map oA chain set sort	ranger/rc.conf	/^map oA chain set sort=atime;     set sort_reverse=True$/;"	k
map oB chain set sort	ranger/rc.conf	/^map oB chain set sort=basename;  set sort_reverse=True$/;"	k
map oC chain set sort	ranger/rc.conf	/^map oC chain set sort=ctime;     set sort_reverse=True$/;"	k
map oE chain set sort	ranger/rc.conf	/^map oE chain set sort=extension; set sort_reverse=True$/;"	k
map oM chain set sort	ranger/rc.conf	/^map oM chain set sort=mtime;     set sort_reverse=True$/;"	k
map oN chain set sort	ranger/rc.conf	/^map oN chain set sort=natural;   set sort_reverse=True$/;"	k
map oS chain set sort	ranger/rc.conf	/^map oS chain set sort=size;      set sort_reverse=True$/;"	k
map oT chain set sort	ranger/rc.conf	/^map oT chain set sort=type;      set sort_reverse=True$/;"	k
map oa chain set sort	ranger/rc.conf	/^map oa chain set sort=atime;     set sort_reverse=False$/;"	k
map ob chain set sort	ranger/rc.conf	/^map ob chain set sort=basename;  set sort_reverse=False$/;"	k
map oc chain set sort	ranger/rc.conf	/^map oc chain set sort=ctime;     set sort_reverse=False$/;"	k
map oe chain set sort	ranger/rc.conf	/^map oe chain set sort=extension; set sort_reverse=False$/;"	k
map om chain set sort	ranger/rc.conf	/^map om chain set sort=mtime;     set sort_reverse=False$/;"	k
map on chain set sort	ranger/rc.conf	/^map on chain set sort=natural;   set sort_reverse=False$/;"	k
map os chain set sort	ranger/rc.conf	/^map os chain set sort=size;      set sort_reverse=False$/;"	k
map ot chain set sort	ranger/rc.conf	/^map ot chain set sort=type;      set sort_reverse=False$/;"	k
map oz set sort	ranger/rc.conf	/^map oz set sort=random$/;"	k
map pL paste_symlink relative	ranger/rc.conf	/^map pL paste_symlink relative=True$/;"	k
map pO paste overwrite	ranger/rc.conf	/^map pO paste overwrite=True append=True$/;"	k
map pP paste append	ranger/rc.conf	/^map pP paste append=True$/;"	k
map pl paste_symlink relative	ranger/rc.conf	/^map pl paste_symlink relative=False$/;"	k
map po paste overwrite	ranger/rc.conf	/^map po paste overwrite=True$/;"	k
map uV      toggle_visual_mode reverse	ranger/rc.conf	/^map uV      toggle_visual_mode reverse=True$/;"	k
map uv      mark_files all	ranger/rc.conf	/^map uv      mark_files all=True val=False$/;"	k
map v       mark_files all	ranger/rc.conf	/^map v       mark_files all=True toggle=True$/;"	k
map ya copy mode	ranger/rc.conf	/^map ya copy mode=add$/;"	k
map yr copy mode	ranger/rc.conf	/^map yr copy mode=remove$/;"	k
map yt copy mode	ranger/rc.conf	/^map yt copy mode=toggle$/;"	k
map_	ranger/commands_full.py	/^class map_(Command):$/;"	c
mapleader	nvim/init.vim	/^let mapleader = "\\<Space>"$/;"	v
mark_tag	ranger/commands_full.py	/^class mark_tag(Command):$/;"	c
markdown	nvim/init.vim	/^augroup markdown$/;"	a
meta	ranger/commands_full.py	/^class meta(prompt_metadata):$/;"	c
mkdir	ranger/commands_full.py	/^class mkdir(Command):$/;"	c
my_edit	ranger/commands.py	/^class my_edit(Command):$/;"	c
n	nvim/init.vim	/^nnoremap <silent> n nzz$/;"	m
name	ranger/commands_full.py	/^    name = 'eval'$/;"	v	class:eval_
name	ranger/commands_full.py	/^    name = 'help'$/;"	v	class:help_
name	ranger/commands_full.py	/^    name = 'map'$/;"	v	class:map_
name	ranger/commands_full.py	/^    name = 'quit!'$/;"	v	class:quit_bang
name	ranger/commands_full.py	/^    name = 'set'  # don't override the builtin set class$/;"	v	class:set_
o	nvim/autoload/plug.vim	/^    nnoremap <silent> <buffer> o    :silent! call <SID>preview_commit()<cr>$/;"	m
open_with	ranger/commands_full.py	/^class open_with(Command):$/;"	c
php	ranger/rifle.conf	/^!mime ^text, label editor, ext xml|json|csv|tex|py|pl|rb|js|sh|php = $EDITOR -- "$@"$/;"	k
php	ranger/rifle.conf	/^!mime ^text, label pager,  ext xml|json|csv|tex|py|pl|rb|js|sh|php = "$PAGER" -- "$@"$/;"	k
php	ranger/rifle.conf	/^label editor, !mime ^text, !ext xml|json|csv|tex|py|pl|rb|js|sh|php  = $EDITOR -- "$@"$/;"	k
php	ranger/rifle.conf	/^label pager,  !mime ^text, !ext xml|json|csv|tex|py|pl|rb|js|sh|php  = "$PAGER" -- "$@"$/;"	k
plug#	nvim/autoload/plug.vim	/^function! plug#(repo, ...)$/;"	f
plug#begin	nvim/autoload/plug.vim	/^function! plug#begin(...)$/;"	f
plug#end	nvim/autoload/plug.vim	/^function! plug#end()$/;"	f
plug#helptags	nvim/autoload/plug.vim	/^function! plug#helptags()$/;"	f
plug#load	nvim/autoload/plug.vim	/^function! plug#load(...)$/;"	f
pmap	ranger/commands_full.py	/^class pmap(map_):$/;"	c
position	ranger/rc.conf	/^map I  eval fm.open_console('rename ' + fm.thisfile.relative_path.replace("%", "%%"), position=7/;"	k
prompt_metadata	ranger/commands_full.py	/^class prompt_metadata(Command):$/;"	c
punmap	ranger/commands_full.py	/^class punmap(unmap):$/;"	c
pythondispatch	nvim/init.vim	/^augroup pythondispatch$/;"	a
pythonsettings	nvim/init.vim	/^augroup pythonsettings$/;"	a
q	nvim/autoload/plug.vim	/^  nnoremap <silent> <buffer> q  :if b:plug_preview==1<bar>pc<bar>endif<bar>bd<cr>$/;"	m
q	nvim/autoload/plug.vim	/^  nnoremap <silent> <buffer> q :q<cr>$/;"	m
quick	ranger/commands_full.py	/^    def quick(self):$/;"	m	class:scout
quit	ranger/commands_full.py	/^class quit(Command):$/;"	c
quit_bang	ranger/commands_full.py	/^class quit_bang(quitall):$/;"	c
quitall	ranger/commands_full.py	/^class quitall(Command):$/;"	c
relink	ranger/commands_full.py	/^class relink(Command):$/;"	c
rename	ranger/commands_full.py	/^class rename(Command):$/;"	c
rename_append	ranger/commands_full.py	/^class rename_append(Command):$/;"	c
resolve_macros	ranger/commands_full.py	/^    resolve_macros = False$/;"	v	class:alias
resolve_macros	ranger/commands_full.py	/^    resolve_macros = False$/;"	v	class:eval_
resolve_macros	ranger/commands_full.py	/^    resolve_macros = False$/;"	v	class:map_
right	ranger/rc.conf	/^cmap <a-right>  eval fm.ui.console.move_word(right=1)$/;"	k
right	ranger/rc.conf	/^cmap <end>   eval fm.ui.console.move(right=-1, absolute=True)$/;"	k
right	ranger/rc.conf	/^cmap <home>  eval fm.ui.console.move(right=0, absolute=True)$/;"	k
right	ranger/rc.conf	/^cmap <right> eval fm.ui.console.move(right=1)$/;"	k
s	nvim/init.vim	/^vmap s <Plug>VSurround$/;"	m
s:HL	badwolf.vim	/^function! s:HL(group, fg, ...)$/;"	f
s:TYPE	nvim/autoload/plug.vim	/^let s:TYPE = {$/;"	v
s:ZoomToggle	nvim/init.vim	/^function! s:ZoomToggle() abort$/;"	f
s:append_ul	nvim/autoload/plug.vim	/^function! s:append_ul(lnum, text)$/;"	f
s:ask	nvim/autoload/plug.vim	/^function! s:ask(message, ...)$/;"	f
s:ask_no_interrupt	nvim/autoload/plug.vim	/^function! s:ask_no_interrupt(...)$/;"	f
s:assign_name	nvim/autoload/plug.vim	/^function! s:assign_name()$/;"	f
s:assoc	nvim/autoload/plug.vim	/^function! s:assoc(dict, key, val)$/;"	f
s:bang	nvim/autoload/plug.vim	/^function! s:bang(cmd, ...)$/;"	f
s:bar	nvim/autoload/plug.vim	/^function! s:bar()$/;"	f
s:base_spec	nvim/autoload/plug.vim	/^let s:base_spec = { 'branch': 'master', 'frozen': 0 }$/;"	v
s:bwc	badwolf.vim	/^let s:bwc = {}$/;"	v
s:bwc	badwolf.vim	/^let s:bwc.blackestgravel = ['141413', 232]$/;"	v
s:bwc	badwolf.vim	/^let s:bwc.blackgravel    = ['1c1b1a', 233]$/;"	v
s:bwc	badwolf.vim	/^let s:bwc.brightgravel   = ['d9cec3', 252]$/;"	v
s:bwc	badwolf.vim	/^let s:bwc.coal = ['000000', 16]$/;"	v
s:bwc	badwolf.vim	/^let s:bwc.coffee    = ['c7915b', 173]$/;"	v
s:bwc	badwolf.vim	/^let s:bwc.dalespale = ['fade3e', 221]$/;"	v
s:bwc	badwolf.vim	/^let s:bwc.darkgravel     = ['242321', 235]$/;"	v
s:bwc	badwolf.vim	/^let s:bwc.darkroast = ['88633f', 95]$/;"	v
s:bwc	badwolf.vim	/^let s:bwc.deepergravel   = ['35322d', 236]$/;"	v
s:bwc	badwolf.vim	/^let s:bwc.deepgravel     = ['45413b', 238]$/;"	v
s:bwc	badwolf.vim	/^let s:bwc.dirtyblonde = ['f4cf86', 222]$/;"	v
s:bwc	badwolf.vim	/^let s:bwc.dress = ['ff9eb8', 211]$/;"	v
s:bwc	badwolf.vim	/^let s:bwc.gravel         = ['857f78', 243]$/;"	v
s:bwc	badwolf.vim	/^let s:bwc.lightgravel    = ['998f84', 245]$/;"	v
s:bwc	badwolf.vim	/^let s:bwc.lime = ['aeee00', 154]$/;"	v
s:bwc	badwolf.vim	/^let s:bwc.mediumgravel   = ['666462', 241]$/;"	v
s:bwc	badwolf.vim	/^let s:bwc.orange = ['ffa724', 214]$/;"	v
s:bwc	badwolf.vim	/^let s:bwc.plain = ['f8f6f2', 15]$/;"	v
s:bwc	badwolf.vim	/^let s:bwc.saltwatertaffy = ['8cffba', 121]$/;"	v
s:bwc	badwolf.vim	/^let s:bwc.snow = ['ffffff', 15]$/;"	v
s:bwc	badwolf.vim	/^let s:bwc.taffy = ['ff2c4b', 196]$/;"	v
s:bwc	badwolf.vim	/^let s:bwc.tardis = ['0a9dff', 39]$/;"	v
s:bwc	badwolf.vim	/^let s:bwc.toffee = ['b88853', 137]$/;"	v
s:check_ruby	nvim/autoload/plug.vim	/^function! s:check_ruby()$/;"	f
s:checkout	nvim/autoload/plug.vim	/^function! s:checkout(spec)$/;"	f
s:chsh	nvim/autoload/plug.vim	/^function! s:chsh(swap)$/;"	f
s:clean	nvim/autoload/plug.vim	/^function! s:clean(force)$/;"	f
s:compare_git_uri	nvim/autoload/plug.vim	/^function! s:compare_git_uri(a, b)$/;"	f
s:cpo_save	nvim/autoload/plug.vim	/^let s:cpo_save = &cpo$/;"	v
s:define_commands	nvim/autoload/plug.vim	/^function! s:define_commands()$/;"	f
s:delete	nvim/autoload/plug.vim	/^function! s:delete(range, force)$/;"	f
s:delete_op	nvim/autoload/plug.vim	/^function! s:delete_op(type, ...)$/;"	f
s:diff	nvim/autoload/plug.vim	/^function! s:diff()$/;"	f
s:dirpath	nvim/autoload/plug.vim	/^  function! s:dirpath(path)$/;"	f
s:do	nvim/autoload/plug.vim	/^function! s:do(pull, force, todo)$/;"	f
s:doautocmd	nvim/autoload/plug.vim	/^function! s:doautocmd(...)$/;"	f
s:dobufread	nvim/autoload/plug.vim	/^function! s:dobufread(names)$/;"	f
s:err	nvim/autoload/plug.vim	/^function! s:err(msg)$/;"	f
s:esc	nvim/autoload/plug.vim	/^function! s:esc(path)$/;"	f
s:escrtp	nvim/autoload/plug.vim	/^function! s:escrtp(path)$/;"	f
s:extract_name	nvim/autoload/plug.vim	/^function! s:extract_name(str, prefix, suffix)$/;"	f
s:find_name	nvim/autoload/plug.vim	/^function! s:find_name(lnum)$/;"	f
s:finish	nvim/autoload/plug.vim	/^function! s:finish(pull)$/;"	f
s:finish_bindings	nvim/autoload/plug.vim	/^function! s:finish_bindings()$/;"	f
s:first_rtp	nvim/autoload/plug.vim	/^let s:first_rtp = s:escrtp(get(s:split_rtp(), 0, ''))$/;"	v
s:format_git_log	nvim/autoload/plug.vim	/^function! s:format_git_log(line)$/;"	f
s:format_message	nvim/autoload/plug.vim	/^function! s:format_message(bullet, name, message)$/;"	f
s:git_validate	nvim/autoload/plug.vim	/^function! s:git_validate(spec, check_branch)$/;"	f
s:git_version_requirement	nvim/autoload/plug.vim	/^function! s:git_version_requirement(...)$/;"	f
s:glob	nvim/autoload/plug.vim	/^function! s:glob(from, pattern)$/;"	f
s:glob_dir	nvim/autoload/plug.vim	/^function! s:glob_dir(path)$/;"	f
s:gutter	badwolf.vim	/^    let s:gutter = 'blackestgravel'$/;"	v
s:gutter	badwolf.vim	/^    let s:gutter = 'blackgravel'$/;"	v
s:hash_match	nvim/autoload/plug.vim	/^function! s:hash_match(a, b)$/;"	f
s:infer_properties	nvim/autoload/plug.vim	/^function! s:infer_properties(name, repo)$/;"	f
s:install	nvim/autoload/plug.vim	/^function! s:install(force, names)$/;"	f
s:isAtStartOfLine	nvim/init.vim	/^function! s:isAtStartOfLine(mapping)$/;"	f
s:is_local_plug	nvim/autoload/plug.vim	/^  function! s:is_local_plug(repo)$/;"	f
s:is_managed	nvim/autoload/plug.vim	/^function! s:is_managed(name)$/;"	f
s:is_preview_window_open	nvim/autoload/plug.vim	/^function! s:is_preview_window_open()$/;"	f
s:is_updated	nvim/autoload/plug.vim	/^function! s:is_updated(dir)$/;"	f
s:is_win	nvim/autoload/plug.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:job_abort	nvim/autoload/plug.vim	/^function! s:job_abort()$/;"	f
s:job_cb	nvim/autoload/plug.vim	/^function! s:job_cb(fn, job, ch, data)$/;"	f
s:job_exit_cb	nvim/autoload/plug.vim	/^function! s:job_exit_cb(self, data) abort$/;"	f
s:job_out_cb	nvim/autoload/plug.vim	/^function! s:job_out_cb(self, data) abort$/;"	f
s:l	Session.vim	/^let s:l = 677 - ((10 * winheight(0) + 15) \/ 30)$/;"	v
s:l	fish/Session.vim	/^let s:l = 81 - ((21 * winheight(0) + 21) \/ 42)$/;"	v
s:last_non_empty_line	nvim/autoload/plug.vim	/^function! s:last_non_empty_line(lines)$/;"	f
s:last_rtp	nvim/autoload/plug.vim	/^let s:last_rtp  = s:escrtp(get(s:split_rtp(), -1, ''))$/;"	v
s:lastline	nvim/autoload/plug.vim	/^function! s:lastline(msg)$/;"	f
s:lines	nvim/autoload/plug.vim	/^function! s:lines(msg)$/;"	f
s:load_plugin	nvim/autoload/plug.vim	/^function! s:load_plugin(spec)$/;"	f
s:loaded	nvim/autoload/plug.vim	/^let s:loaded = get(s:, 'loaded', {})$/;"	v
s:loaded_names	nvim/autoload/plug.vim	/^function! s:loaded_names()$/;"	f
s:lod	nvim/autoload/plug.vim	/^function! s:lod(names, types, ...)$/;"	f
s:lod_cmd	nvim/autoload/plug.vim	/^function! s:lod_cmd(cmd, bang, l1, l2, args, names)$/;"	f
s:lod_ft	nvim/autoload/plug.vim	/^function! s:lod_ft(pat, names)$/;"	f
s:lod_map	nvim/autoload/plug.vim	/^function! s:lod_map(map, names, with_prefix, prefix)$/;"	f
s:log	nvim/autoload/plug.vim	/^function! s:log(bullet, name, lines)$/;"	f
s:log4	nvim/autoload/plug.vim	/^function! s:log4(name, msg)$/;"	f
s:logpos	nvim/autoload/plug.vim	/^function! s:logpos(name)$/;"	f
s:lpad	nvim/autoload/plug.vim	/^function! s:lpad(str, len)$/;"	f
s:mac_gui	nvim/autoload/plug.vim	/^let s:mac_gui = has('gui_macvim') && has('gui_running')$/;"	v
s:me	nvim/autoload/plug.vim	/^let s:me = resolve(expand('<sfile>:p'))$/;"	v
s:names	nvim/autoload/plug.vim	/^function! s:names(...)$/;"	f
s:new_window	nvim/autoload/plug.vim	/^function! s:new_window()$/;"	f
s:nvim	nvim/autoload/plug.vim	/^let s:nvim = has('nvim-0.2') || (has('nvim') && exists('*jobwait') && !s:is_win)$/;"	v
s:nvim_cb	nvim/autoload/plug.vim	/^function! s:nvim_cb(job_id, data, event) dict abort$/;"	f
s:parse_options	nvim/autoload/plug.vim	/^function! s:parse_options(arg)$/;"	f
s:path	nvim/autoload/plug.vim	/^  function! s:path(path)$/;"	f
s:plug_buf	nvim/autoload/plug.vim	/^let s:plug_buf = get(s:, 'plug_buf', -1)$/;"	v
s:plug_src	nvim/autoload/plug.vim	/^let s:plug_src = 'https:\/\/github.com\/junegunn\/vim-plug.git'$/;"	v
s:plug_tab	nvim/autoload/plug.vim	/^let s:plug_tab = get(s:, 'plug_tab', -1)$/;"	v
s:plug_window_exists	nvim/autoload/plug.vim	/^function! s:plug_window_exists()$/;"	f
s:prepare	nvim/autoload/plug.vim	/^function! s:prepare(...)$/;"	f
s:prevcountcache	nvim/init.vim	/^let s:prevcountcache=[[], 0]$/;"	v
s:preview_commit	nvim/autoload/plug.vim	/^function! s:preview_commit()$/;"	f
s:progress_bar	nvim/autoload/plug.vim	/^function! s:progress_bar(line, bar, total)$/;"	f
s:progress_opt	nvim/autoload/plug.vim	/^function! s:progress_opt(base)$/;"	f
s:reap	nvim/autoload/plug.vim	/^function! s:reap(name)$/;"	f
s:regress_bar	nvim/autoload/plug.vim	/^function! s:regress_bar()$/;"	f
s:reload_plugins	nvim/autoload/plug.vim	/^function! s:reload_plugins()$/;"	f
s:remove_rtp	nvim/autoload/plug.vim	/^function! s:remove_rtp()$/;"	f
s:remove_triggers	nvim/autoload/plug.vim	/^function! s:remove_triggers(name)$/;"	f
s:reorg_rtp	nvim/autoload/plug.vim	/^function! s:reorg_rtp()$/;"	f
s:retry	nvim/autoload/plug.vim	/^function! s:retry()$/;"	f
s:revert	nvim/autoload/plug.vim	/^function! s:revert()$/;"	f
s:rm_rf	nvim/autoload/plug.vim	/^function! s:rm_rf(dir)$/;"	f
s:rtp	nvim/autoload/plug.vim	/^  function! s:rtp(spec)$/;"	f
s:section	nvim/autoload/plug.vim	/^function! s:section(flags)$/;"	f
s:shellesc	nvim/autoload/plug.vim	/^function! s:shellesc(arg)$/;"	f
s:snapshot	nvim/autoload/plug.vim	/^function! s:snapshot(force, ...) abort$/;"	f
s:so_save	Session.vim	/^let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0$/;"	v
s:so_save	fish/Session.vim	/^let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0$/;"	v
s:source	nvim/autoload/plug.vim	/^function! s:source(from, ...)$/;"	f
s:spawn	nvim/autoload/plug.vim	/^function! s:spawn(name, cmd, opts)$/;"	f
s:split_rtp	nvim/autoload/plug.vim	/^function! s:split_rtp()$/;"	f
s:status	nvim/autoload/plug.vim	/^function! s:status()$/;"	f
s:status_load	nvim/autoload/plug.vim	/^function! s:status_load(lnum)$/;"	f
s:status_update	nvim/autoload/plug.vim	/^function! s:status_update() range$/;"	f
s:switch_in	nvim/autoload/plug.vim	/^function! s:switch_in()$/;"	f
s:switch_out	nvim/autoload/plug.vim	/^function! s:switch_out(...)$/;"	f
s:sx	Session.vim	/^let s:sx = expand("<sfile>:p:r")."x.vim"$/;"	v
s:sx	fish/Session.vim	/^let s:sx = expand("<sfile>:p:r")."x.vim"$/;"	v
s:syntax	nvim/autoload/plug.vim	/^function! s:syntax()$/;"	f
s:system	nvim/autoload/plug.vim	/^function! s:system(cmd, ...)$/;"	f
s:system_chomp	nvim/autoload/plug.vim	/^function! s:system_chomp(...)$/;"	f
s:tabline	badwolf.vim	/^        let s:tabline = 'blackestgravel'$/;"	v
s:tabline	badwolf.vim	/^        let s:tabline = 'blackgravel'$/;"	v
s:tabline	badwolf.vim	/^        let s:tabline = 'darkgravel'$/;"	v
s:tabline	badwolf.vim	/^        let s:tabline = 'deepgravel'$/;"	v
s:tabline	badwolf.vim	/^    let s:tabline = 'blackgravel'$/;"	v
s:tick	nvim/autoload/plug.vim	/^function! s:tick()$/;"	f
s:to_a	nvim/autoload/plug.vim	/^function! s:to_a(v)$/;"	f
s:to_s	nvim/autoload/plug.vim	/^function! s:to_s(v)$/;"	f
s:triggers	nvim/autoload/plug.vim	/^let s:triggers = get(s:, 'triggers', {})$/;"	v
s:trim	nvim/autoload/plug.vim	/^function! s:trim(str)$/;"	f
s:update	nvim/autoload/plug.vim	/^function! s:update(force, names)$/;"	f
s:update_finish	nvim/autoload/plug.vim	/^function! s:update_finish()$/;"	f
s:update_impl	nvim/autoload/plug.vim	/^function! s:update_impl(pull, force, args) abort$/;"	f
s:update_python	nvim/autoload/plug.vim	/^function! s:update_python()$/;"	f
s:update_ruby	nvim/autoload/plug.vim	/^function! s:update_ruby()$/;"	f
s:update_vim	nvim/autoload/plug.vim	/^function! s:update_vim()$/;"	f
s:upgrade	nvim/autoload/plug.vim	/^function! s:upgrade()$/;"	f
s:upgrade_specs	nvim/autoload/plug.vim	/^function! s:upgrade_specs()$/;"	f
s:version_requirement	nvim/autoload/plug.vim	/^function! s:version_requirement(val, min)$/;"	f
s:vim8	nvim/autoload/plug.vim	/^let s:vim8 = has('patch-8.0.0039') && exists('*job_start')$/;"	v
s:warn	nvim/autoload/plug.vim	/^function! s:warn(cmd, msg)$/;"	f
s:wipebuf	Session.vim	/^  let s:wipebuf = bufnr('%')$/;"	v
s:wipebuf	fish/Session.vim	/^  let s:wipebuf = bufnr('%')$/;"	v
s:with_cd	nvim/autoload/plug.vim	/^function! s:with_cd(cmd, dir)$/;"	f
safepipe	ranger/scope.sh	/^safepipe() { "$@"; test $? = 0 -o $? = 141; }$/;"	f
save_copy_buffer	ranger/commands_full.py	/^class save_copy_buffer(Command):$/;"	c
scout	ranger/commands_full.py	/^class scout(Command):$/;"	c
set_	ranger/commands_full.py	/^class set_(Command):$/;"	c
setintag	ranger/commands_full.py	/^class setintag(setlocal):$/;"	c
setlocal	ranger/commands_full.py	/^class setlocal(set_):$/;"	c
shell	ranger/commands_full.py	/^class shell(Command):$/;"	c
stage	ranger/commands_full.py	/^class stage(Command):$/;"	c
stripwhitespace	nvim/init.vim	/^augroup stripwhitespace$/;"	a
tab	ranger/commands.py	/^    def tab(self, tabnum):$/;"	m	class:my_edit
tab	ranger/commands_full.py	/^    def tab(self, tabnum):$/;"	m	class:cd
tab	ranger/commands_full.py	/^    def tab(self, tabnum):$/;"	m	class:default_linemode
tab	ranger/commands_full.py	/^    def tab(self, tabnum):$/;"	m	class:delete
tab	ranger/commands_full.py	/^    def tab(self, tabnum):$/;"	m	class:edit
tab	ranger/commands_full.py	/^    def tab(self, tabnum):$/;"	m	class:meta
tab	ranger/commands_full.py	/^    def tab(self, tabnum):$/;"	m	class:mkdir
tab	ranger/commands_full.py	/^    def tab(self, tabnum):$/;"	m	class:open_with
tab	ranger/commands_full.py	/^    def tab(self, tabnum):$/;"	m	class:relink
tab	ranger/commands_full.py	/^    def tab(self, tabnum):$/;"	m	class:rename
tab	ranger/commands_full.py	/^    def tab(self, tabnum):$/;"	m	class:scout
tab	ranger/commands_full.py	/^    def tab(self, tabnum):$/;"	m	class:set_
tab	ranger/commands_full.py	/^    def tab(self, tabnum):$/;"	m	class:shell
tab	ranger/commands_full.py	/^    def tab(self, tabnum):$/;"	m	class:touch
terminal	ranger/commands_full.py	/^class terminal(Command):$/;"	c
test#javascript#jest#options	nvim/init.vim	/^let test#javascript#jest#options = {$/;"	v
tmap	ranger/commands_full.py	/^class tmap(map_):$/;"	c
touch	ranger/commands_full.py	/^class touch(Command):$/;"	c
trim	ranger/scope.sh	/^trim() { head -n "$maxln"; }$/;"	f
try	ranger/scope.sh	/^try() { output=$(eval '"$@"'); }$/;"	f
tunmap	ranger/commands_full.py	/^class tunmap(unmap):$/;"	c
unmap	ranger/commands_full.py	/^class unmap(Command):$/;"	c
unmark_tag	ranger/commands_full.py	/^class unmark_tag(mark_tag):$/;"	c
unstage	ranger/commands_full.py	/^class unstage(Command):$/;"	c
v	nvim/init.vim	/^vmap v :'<,'>VSSplitAbove<CR>$/;"	m
vimux	nvim/init.vim	/^augroup vimux$/;"	a
vimwiki	nvim/init.vim	/^augroup vimwiki$/;"	a
z/	nvim/init.vim	/^map z\/ <Plug>(incsearch-fuzzy-\/)$/;"	m
z?	nvim/init.vim	/^map z? <Plug>(incsearch-fuzzy-?)$/;"	m
¬	nvim/init.vim	/^map ¬ <c-w>l$/;"	m
˙	nvim/init.vim	/^map ˙ <c-w>h$/;"	m
˚	nvim/init.vim	/^map ˚ <c-w>k$/;"	m
∆	nvim/init.vim	/^map ∆ <c-w>j$/;"	m
